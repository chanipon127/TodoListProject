import 'package:flutter/material.dart';
import 'package:flutter_application_1/ToDo_model.dart';
import 'package:flutter_application_1/api.dart';
import 'package:flutter_application_1/main.dart';

class TodoListScreen extends StatefulWidget {
  //‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ To-Do
  const TodoListScreen({super.key});
  @override
  State<TodoListScreen> createState() => _TodoListScreenState();
}

class _TodoListScreenState extends State<TodoListScreen> {
  late Future<List<Todo>> futureTodos; //‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ To-Do ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API
  final TextEditingController _controller =
      TextEditingController(); //‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° TextField ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà

  @override
  void initState() {
    //‡πÄ‡∏°‡∏∑‡πà‡∏≠ widget ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• To-Do ‡∏à‡∏≤‡∏Å API
    super.initState();
    futureTodos = fetchTodos();
  }

  void _addTodo() async {
    //‡πÄ‡∏û‡∏¥‡πà‡∏° To-Do
    if (_controller.text.isNotEmpty) {
      await addTodo(_controller.text); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      setState(() {
        futureTodos = fetchTodos(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      });
      _controller.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á input
    }
  }

  void _deleteTodo(int id) async {
    //‡∏•‡∏ö To-Do ‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° id ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    await deleteTodo(id);
    setState(() {
      futureTodos = fetchTodos();
    });
  }

  void _toggleComplete(Todo todo) async {
    //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
    await updateTodo(todo.id, !todo.completed); // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    setState(() {
      futureTodos = fetchTodos();
    });
  }

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Scaffold(
      appBar: AppBar(
        title: const Text("üåì To-Do List"),
        centerTitle: true,
        backgroundColor:
            isDark ? Colors.black : const Color.fromARGB(255, 110, 186, 240),
        actions: [
          IconButton(
            ////‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡∏ò‡∏µ‡∏° (dark/light) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global themeNotifier
            icon: Icon(isDark ? Icons.wb_sunny : Icons.dark_mode),
            onPressed: () {
              themeNotifier.value = isDark ? ThemeMode.light : ThemeMode.dark;
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    // ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    controller: _controller,
                    decoration: InputDecoration(
                      hintText: 'Add a new task...',
                      prefixIcon: Icon(Icons.edit, color: Colors.grey),
                      filled: true,
                      fillColor: Colors.white,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(15),
                        borderSide: BorderSide.none,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: _addTodo,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color.fromARGB(255, 82, 134, 198),
                    foregroundColor: Colors.white,
                    elevation: 3,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12)),
                  ),
                  child: const Icon(Icons.add, size: 28),
                )
              ],
            ),
          ),
          Expanded(
            child: FutureBuilder<List<Todo>>(
              //‡πÉ‡∏ä‡πâ FutureBuilder ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
              future: futureTodos,
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  final todos = snapshot.data!;
                  return ListView.builder(
                    itemCount: todos.length,
                    itemBuilder: (context, index) {
                      final todo = todos[index];
                      return Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 6),
                        child: Card(
                          elevation: 4, //‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
                          shape: RoundedRectangleBorder(
                              //‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á Card ‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
                              borderRadius: BorderRadius.circular(16)),
                          color: Colors.white, //‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á Card ‡πÄ‡∏õ‡πá‡∏ô ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                          child: CheckboxListTile(
                            //‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏°‡∏µ checkbox + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + widget ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
                            value: todo
                                .completed, //‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á checkbox ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                            onChanged: (_) => _toggleComplete(
                                todo), //‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ï‡∏¥‡πä‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡πä‡∏Å) ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _toggleComplete(todo)
                            title: Text(
                              //‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á To-Do
                              todo.title,
                              style: TextStyle(
                                decoration: todo.completed
                                    ? TextDecoration
                                        .lineThrough //‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à (completed == true) ‡πÉ‡∏´‡πâ‡∏Ç‡∏µ‡∏î‡∏Ü‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                                    : TextDecoration.none,
                                fontSize: 16,
                                color: todo.completed
                                    ? Colors.grey
                                    : Colors
                                        .black, //‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                              ),
                            ),
                            secondary: IconButton(
                              icon: const Icon(Icons.delete, //‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
                                  color: Colors.redAccent),
                              onPressed: () => _deleteTodo(todo
                                  .id), //‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _deleteTodo() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö To-Do ‡∏≠‡∏≠‡∏Å
                            ),
                          ),
                        ),
                      );
                    },
                  );
                } else if (snapshot.hasError) {
                  return Center(
                      child: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${snapshot.error}"));
                }
                return const Center(child: CircularProgressIndicator());
              },
            ),
          ),
        ],
      ),
    );
  }
}
